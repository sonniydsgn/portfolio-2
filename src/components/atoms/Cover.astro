---
import type { ImageMetadata } from 'astro'
import { Picture } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

interface Props {
	cover: CollectionEntry<'projects'>['data']['cover']
	width: number
	height: number
	loading?: 'eager' | 'lazy' | undefined | null
	fetchpriority?: 'low' | 'high' | 'auto' | null | undefined
	containerClass?: string
	class?: string
}

const { cover, width, height, loading, fetchpriority, containerClass, class: className, ...props } = Astro.props
---

<script>
	const lazyVideos = document.querySelectorAll('.cover-container video')

	const options = {
		rootMargin: '-50% 0%',
		threshold: 0,
	}

	const observer = new IntersectionObserver(function (entries) {
		entries.forEach(entry => {
			const video = entry.target as HTMLVideoElement

			if (entry.isIntersecting) {
				video.play()
			} else {
				video.pause()
			}
		})
	}, options)

	// initial loading
	const observerinit = new IntersectionObserver(function (entries, observerinit) {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const video = entry.target as HTMLVideoElement
				video.load()

				observerinit.unobserve(video)
				observer.observe(video)
			}
		})
	}, options)

	lazyVideos.forEach(video => {
		observerinit.observe(video)
	})
</script>

<div class:list={['cover-container', containerClass]} {...props}>
	{
		cover?.mp4?.length > 0 ? (
			<video
				preload="none"
				loop
				muted
				playsinline
				tabindex="-1"
				width={width}
				height={height}
				poster={cover.img.src}
				style={'aspect-ratio: ' + width + '/' + height}
				class:list={['cover', className]}
				{...props}
			>
				<source src={cover.h265} type="video/mp4" />
				<source src={cover.mp4} type="video/mp4" />
				Ваш браузер не поддерживает встроенные видео :(
			</video>
		) : (
			<Picture
				src={cover.img as ImageMetadata}
				alt={cover?.alt}
				{loading}
				{fetchpriority}
				formats={['avif', 'webp']}
				width={width}
				height={height}
				class:list={['cover', className]}
				{...props}
			/>
		)
	}
</div>

<style is:global>
	.cover-container {
		background-color: var(--cover-color);
		width: 100%;
	}

	.cover {
		display: flex;
		background-color: var(--bg-placeholder);
		width: 100%;
	}
</style>
