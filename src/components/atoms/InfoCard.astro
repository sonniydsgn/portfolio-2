---
import convertBytes from '@/scripts/libs/convert-bytes'
import type { ImageMetadata } from 'astro'
import { Icon } from 'astro-icon/components'
import { Picture } from 'astro:assets'
import fs from 'fs'
import path from 'path'

interface Props {
	name: string
	desc?: string
	number?: number
	icon?: string
	image?: ImageMetadata
	href?: string
	type?: 'link' | 'file'
}

const { name, number, href, image, type = href && 'link' } = Astro.props

let { desc, icon } = Astro.props

// link handler
if (type === 'link') {
	!icon && (icon = 'external-link-icon')
	desc = href.replace(/(^\w+:|^)\/\//, '')
}

if (type === 'file') {
	const filePath = path.join(process.cwd(), href)
	const fileType = path.extname(filePath).replace('.', '').toUpperCase() + '-файл'
	const fileSize = convertBytes(fs.statSync(filePath).size)

	!icon && (icon = 'file-icon')
	desc = fileType + ', ' + fileSize
}
---

<li class:list={['info-card', { 'info-card--link': href }]}>
	{image && <Picture class="info-card__image" src={image} alt="" formats={['avif', 'webp']} width={32} height={32} />}

	{number && <div class="info-card__number">{number}</div>}

	{
		icon && (
			<div class="info-card__icon">
				<Icon class="icon icon--16" name={icon} aria-hidden="true" />
			</div>
		)
	}

	<div class="info-card__content">
		<span class="info-card__name">
			{
				href ? (
					<a {href} class="info-card__link" target="_blank" rel="noopener">
						{name}
					</a>
				) : (
					name
				)
			}
		</span>

		{desc && <span class="info-card__desc">{desc}</span>}
	</div>
</li>

<style>
	.info-card {
		display: flex;
		position: relative;
		align-items: start;
		justify-items: start;
		gap: 16px;
		border: 1px solid var(--border-primary);
		border-radius: var(--br-lg);
		padding: 24px 20px;
		font-family: var(--ff-secondary);

		@media (width <= 768) {
			flex-direction: column;
			gap: 12px;
			border-radius: var(--br-md);
			padding: 16px;
			font-size: var(--font-sm);
		}
	}

	.info-card--link {
		transition: background-color var(--tr-primary);
		background-color: var(--bg-secondary);

		.info-card__desc {
			width: 100%;
			overflow-x: hidden;
			text-overflow: ellipsis;
			text-wrap: nowrap;
		}

		@media (hover) {
			&:hover {
				background-color: transparent;
			}
		}
	}

	.info-card__icon,
	.info-card__number {
		display: flex;
		justify-content: center;
		align-items: center;
		background-color: var(--bg-tertiary);
		color: var(--text-primary-0);
	}

	.info-card__icon {
		border-radius: var(--br-primary);
		padding: 8px;
	}

	.info-card__number {
		--size: 24px;

		border-radius: var(--br-sm);
		width: var(--size);
		height: var(--size);
	}

	.info-card__image {
		display: flex;
		border-radius: 100%;
	}

	.info-card__content {
		display: flex;
		flex-direction: column;
		gap: 2px;
	}

	.info-card__name {
		color: var(--text-primary-0);
		font-weight: 600;
		line-height: var(--lh-lg);
	}

	.info-card__desc {
		font-weight: 400;
	}

	.info-card__link::before {
		position: absolute;
		inset: 0;
		content: '';
	}
</style>
