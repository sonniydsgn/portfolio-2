---
import { Icon } from 'astro-icon/components'
import ButtonLink from '../atoms/ButtonLink.astro'
---

<ButtonLink
	class="btn btn--primary btn--only-icon theme-switcher"
	aria-label="Включить тёмную тему"
	aria-live="polite"
	data-theme-picker
>
	<Icon name="sun-icon" class="icon theme-switcher__icon" data-theme-icon="light" aria-hidden="true" />
	<Icon name="moon-icon" class="icon theme-switcher__icon" data-theme-icon="dark" aria-hidden="true" />
</ButtonLink>

<style>
	@media (prefers-color-scheme: light) {
		:root:not([data-theme]) [data-theme-icon='light'] {
			display: block;
			color: var(--button-primary-text-primary);
		}
	}

	@media (prefers-color-scheme: dark) {
		:root:not([data-theme]) [data-theme-icon='dark'] {
			display: block;
			color: var(--button-primary-text-primary);
		}
	}

	:root[data-theme='light'] [data-theme-icon='light'] {
		display: block;
		color: var(--button-primary-text-primary);
	}

	:root[data-theme='dark'] [data-theme-icon='dark'] {
		display: block;
		color: var(--button-primary-text-primary);
	}

	.theme-switcher__icon {
		transition: color var(--tr-primary);
		color: var(--button-primary-text-secondary);

		@media (width <= 880) {
			display: none;
		}
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const themePicker = document.querySelector('[data-theme-picker]') as HTMLElement
		if (themePicker) {
			const THEME_OWNER = document.documentElement

			let systemTheme: string
			const cachedTheme = localStorage.getItem('theme')

			// set theme picker label
			const setThemePickerLabel = (theme: string) => {
				themePicker.setAttribute('aria-label', theme === 'dark' ? 'Включить светлую тему' : 'Включить тёмную тему')
			}

			// set inital theme
			if (cachedTheme) {
				THEME_OWNER.dataset['theme'] = cachedTheme
				setThemePickerLabel(cachedTheme)
			} else {
				systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches === true ? 'dark' : 'light'
				setThemePickerLabel(systemTheme)

				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches: isDark }) => {
					systemTheme = isDark ? 'dark' : 'light'
					setThemePickerLabel(systemTheme)
				})
			}

			// set theme on click
			themePicker.addEventListener('click', () => {
				const theme = THEME_OWNER.dataset['theme'] === undefined ? systemTheme : THEME_OWNER.dataset['theme']

				if (theme === 'light') {
					THEME_OWNER.dataset['theme'] = 'dark'
					localStorage.setItem('theme', 'dark')
					themePicker.setAttribute('aria-label', 'Включить светлую тему')
				} else {
					THEME_OWNER.dataset['theme'] = 'light'
					localStorage.setItem('theme', 'light')
					themePicker.setAttribute('aria-label', 'Включить тёмную тему')
				}
			})
		}
	})
</script>

<script>
	document.addEventListener('astro:after-swap', () => {
		const themePicker = document.querySelector('[data-theme-picker]') as HTMLElement
		if (themePicker) {
			const THEME_OWNER = document.documentElement
			let systemTheme: string
			const cachedTheme = localStorage.getItem('theme')
			// set theme picker label
			const setThemePickerLabel = (theme: string) => {
				themePicker.setAttribute('aria-label', theme === 'dark' ? 'Включить светлую тему' : 'Включить тёмную тему')
			}

			if (cachedTheme) {
				THEME_OWNER.dataset['theme'] = cachedTheme
				setThemePickerLabel(cachedTheme)
			} else {
				systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches === true ? 'dark' : 'light'
				setThemePickerLabel(systemTheme)
				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches: isDark }) => {
					systemTheme = isDark ? 'dark' : 'light'
					setThemePickerLabel(systemTheme)
				})
			}
		}
	})
</script>
