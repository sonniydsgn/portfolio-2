---
import '@/styles/page-content.css'

import { Icon } from 'astro-icon/components'
import { slugify, transliterate } from 'transliteration'

interface Props {
	title: string
	icon?: string
	size?: 'null' | 'sm' | 'md'
	wrapped?: boolean
	class?: string
}

const { title, icon = '◌', size = 'md', wrapped = false, class: className, ...props } = Astro.props

const slug = title && slugify(transliterate(title))
---

<script>
	const wrappedSection = document.querySelectorAll('[data-wrap-section]')

	if (wrappedSection) {
		wrappedSection.forEach((section: HTMLElement) => {
			let state = section.dataset.wrapSection
			const toggle = section.querySelector('.content-section__toggle')

			toggle.addEventListener('click', () => {
				if (state === 'unwrap') {
					state = ''
					section.dataset.wrapSection = state

					toggle.setAttribute('aria-expanded', 'false')
					toggle.setAttribute('aria-label', 'Развернуть содержание')
				} else {
					state = 'unwrap'
					section.dataset.wrapSection = state

					toggle.setAttribute('aria-expanded', 'true')
					toggle.setAttribute('aria-label', 'Скрыть содержание')
				}
			})
		})
	}
</script>

<section
	data-toc-section={!wrapped ? '' : null}
	data-wrap-section={wrapped ? '' : null}
	class:list={[
		'content-section',
		{ 'content-section--sm': size === 'sm' },
		{ 'content-section--null': size === 'null' },
		className,
	]}
	id={slug}
	{...props}
>
	<header class="content-section__header">
		<span class="text-h2 content-section__icon" aria-hidden="true">{icon}</span>
		<h2 class="text-h2 content-section__title">
			{
				wrapped ? (
					<button
						type="button"
						class="btn-reset content-section__toggle"
						aria-expanded="false"
						aria-label="Развернуть содержание"
					>
						{title}

						<span class="content-section__chevron">
							<Icon name="chevron-down-icon" class="icon" />
						</span>
					</button>
				) : (
					title
				)
			}
		</h2>
	</header>
	<div class="content-section__body">
		{
			wrapped ? (
				<div class="content-section__wrap">
					<slot />
				</div>
			) : (
				<slot />
			)
		}
	</div>
</section>

<style>
	.content-section {
		--section-padding: 48px;
		--inline-padding: 24px;

		display: grid;
		align-items: start;
		border: 1px solid var(--border-secondary);
		border-radius: var(--br-lg);
		background-color: var(--bg-primary);

		@media (width <= 880) {
			--inline-padding: 16px;
			--section-padding: 32px;
		}
	}

	.content-section--sm {
		--section-padding: 24px;

		@media (width <= 880) {
			--section-padding: 12px;
		}
	}

	.content-section--null {
		--section-padding: 0px;

		@media (width <= 880) {
			--section-padding: 0px;
		}
	}

	.content-section__header {
		--border-color: var(--border-secondary);

		display: flex;
		align-items: center;
		border-bottom: 1px solid var(--border-color);
		padding-inline: var(--inline-padding);
		padding-block-start: 16px;
		padding-block-end: 12px;

		@media (width <= 880) {
			padding-block-start: 12px;
			padding-block-end: 10px;
		}
	}

	.content-section__icon {
		margin-inline-end: 8px;
	}

	.content-section__title {
		margin-inline-end: auto;
		width: 100%;
	}

	.content-section__body {
		--pd-block-start: var(--section-padding);
		--pd-block-end: 48px;

		display: flex;
		flex-direction: column;
		padding-inline: var(--inline-padding);
		padding-block-start: var(--section-padding);
		padding-block-end: var(--pd-block-end);

		@media (width <= 880) {
			--pd-block-end: 32px;
		}
	}

	/* wrapped section */
	[data-wrap-section] {
		overflow: hidden;
	}

	[data-wrap-section] .content-section__header {
		position: relative;
		transition-delay: 0.2s;
		transition-property: border-bottom-color;
		border-bottom-color: transparent;
	}

	[data-wrap-section] .content-section__toggle {
		display: flex;
		justify-content: space-between;
		align-items: center;
		width: 100%;
		color: inherit;
		font-weight: inherit;
		font-size: inherit;
		line-height: inherit;
		font-family: inherit;
		text-transform: inherit;

		&:focus {
			outline: none;
		}

		&:focus-visible {
			&::after {
				outline: 5px auto Highlight;
				outline: 5px auto -webkit-focus-ring-color;
			}
		}

		&::after {
			position: absolute;
			inset: 0;
			width: 100%;
			height: 100%;
			content: '';
		}
	}

	[data-wrap-section] .content-section__chevron {
		display: flex;
		transition: transform var(--tr-primary);
		pointer-events: none;

		@media (width <= 880) {
			& .icon {
				--size: 20px;
			}
		}
	}

	[data-wrap-section] .content-section__body {
		display: grid;
		grid-template-rows: 0fr;
		transition:
			grid-template-rows var(--tr-primary),
			padding-block var(--tr-primary);
		padding-block: unset;

		& > .content-section__wrap {
			grid-row: 1 / span 2;
			overflow: hidden;
		}
	}

	[data-wrap-section='unwrap'] {
		& .content-section__header {
			transition-delay: unset;
			border-bottom-color: var(--border-color);
		}

		& .content-section__body {
			grid-template-rows: 1fr;
			padding-block: var(--pd-block-start) var(--pd-block-end);
		}

		& .content-section__chevron {
			transform: rotate(180deg);
		}
	}
</style>
