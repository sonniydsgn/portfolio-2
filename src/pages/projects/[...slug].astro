---
import Link from '@/components/atoms/ButtonLink.astro'
import H3 from '@/components/atoms/H3.astro'
import Image from '@/components/atoms/Image.astro'
import InfoCard from '@/components/atoms/InfoCard.astro'
import ContentList from '@/components/molecules/ContentList.astro'
import InfoList from '@/components/molecules/InfoList.astro'
import Meta from '@/components/molecules/Meta.astro'
import ContentPlaceholder from '@/components/organisms/ContentPlaceholder.astro'
import ContentSection from '@/components/organisms/ContentSection.astro'
import Hero from '@/components/organisms/Hero.astro'
import NextCard from '@/components/organisms/NextCard.astro'
import Toc from '@/components/organisms/Toc.astro'
import Video from '@/components/atoms/Video.astro'
import ProjectLayout from '@/layouts/ProjectLayout.astro'
import Cover from '@/components/atoms/Cover.astro'
import getProjects from '@/scripts/getters/get-projects'
import getHighlightSource from '@/scripts/getters/get-highlight'
import type { TocItem } from '@/types'
import type { ImageMetadata } from 'astro'
import { slugify, transliterate } from 'transliteration'

export async function getStaticPaths() {
	const projects = await getProjects()
	return projects.map(project => ({ params: { slug: project.slug }, props: { project } }))
}

const { project } = Astro.props
const { Content } = await project.render()

const { name: title, desc, place_work, color, cover, roles, team, timeline, highlights, result, draft } = project.data

// select next page
const projects = await getProjects()
const currentIndex = projects.findIndex(p => p.slug === project.slug)
const nextProject = projects[currentIndex + 1] || projects[0]


// toc
const headings: TocItem[] = project.body
	.split('\n')
	.filter(line => line.includes(':::Section['))
	.map(line => line.match(/:::Section\[(.*?)\]/)![1])
	.map(title => ({ title, slug: '#' + slugify(transliterate(title)) }))

headings.unshift({ title: 'О проекте', slug: '#' + slugify(transliterate('О проекте'))}, { title: 'Хайлайты', slug: '#' + slugify(transliterate('Хайлайты'))})

const needToc = (headings.length >= 3 && !draft) || (headings.length >= 3 && import.meta.env.DEV)

// highlights
const highlightsPrepared = highlights?.map(highlight => {
	return {
		...highlight,
		src: getHighlightSource(highlight.type, highlight.src),
	}
})

// cover
const coverWidth = 1440
const coverHeight = 952

// components
const Section = ContentSection
const List = InfoList
const Card = InfoCard
---

<ProjectLayout title={title + ' — Алексей Калинин'} {desc}>
	<article class="article" style={'--cover-color: ' + '#' + color}>
		<Hero class="article__hero" {title} {desc} tag="header" centered>
			<Meta
				class="article__meta"
				client={{
					logo: place_work.logo as ImageMetadata,
					name: project.data.place_work.name,
					href: project.data.place_work.link,
				}}
				year={project.data.year}
				slot="header"
			/>

			<Cover {cover} width={coverWidth} height={coverHeight} containerClass="article__cover-container" class='article__cover' loading='eager' fetchpriority='high'  />
		</Hero>

		<ContentList tag="div" class="article__list">
			<div class="container">
				<div class="article__inner grid grid--page">
					<!-- desktop toc -->
					{
						needToc && (
							<Toc class="article__toc article__toc--desktop" list={headings} hasResult={draft && result != null} />
						)
					}

					<ContentList tag="div" class="article__content">
						<!-- mobile toc section -->
						{
							needToc && (
								<ContentSection
									class="article__toc article__toc--mobile"
									title="Содержание"
									icon="§"
									size="sm"
									type="accordion"
								>
									<Toc list={headings} hasResult={draft && result != null} mobile />
								</ContentSection>
							)
						}

						<!-- base sections -->
						<ContentSection title="О проекте">
							<H3>Моя роль</H3>
							<List>
								{roles.map(role => <Card name={role.name} desc={role.desc} icon={role.icon} />)}
							</List>

							{team && (
								<H3>Команда</H3>
								<List>
									{
										team.map(people => (
											<Card name={people.name} desc={people.desc} image={people.image as ImageMetadata} />
										))
									}
								</List>
							)}

							<H3>Время работы</H3>
							<Card name={timeline.period} desc={timeline.status} icon="clock-icon" tag="div" />
						</ContentSection>

						{
							highlights && (
								<ContentSection title="Хайлайты" size='sm'>
									{highlightsPrepared.map(highlight => (
										highlight.type === 'image' ? (
											<Image src={highlight.src[0] as unknown as ImageMetadata} alt={highlight.alt} title={highlight.title} />
										) : (
											<Video title={highlight.title} width={1440} height={1000} poster={highlight.src[0].src} autoplay>
												<source src={highlight.src[2]} type="video/mp4" />
												<source src={highlight.src[1]} type="video/mp4" />
											</Video>
										)
									))}
								</ContentSection>
							)
						}

						<!-- other sections -->
						{
							draft && import.meta.env.PROD ? (
								<ContentPlaceholder id="result" data-toc-section>
									{result && <InfoCard name="Посмотреть сайт" href={result} />}
									<InfoCard name="Обсудить проект" href="https://t.me/sonniyboii" icon="message-text-icon" />
								</ContentPlaceholder>
							) : (
								<Content components={{ img: Image, h3: H3, a: Link, Section, Card, List }} />
							)
						}
					</ContentList>
				</div>
			</div>
			<div class="article__other">
				<div class="container">
					<div class="article__other-inner grid grid--page">
						<NextCard
							class="article__next-page"
							title={nextProject.data.name}
							cover={nextProject.data.cover}
							color={nextProject.data.color}
							href={'/' + nextProject.collection + '/' + nextProject.slug}
						/>
					</div>
				</div>
			</div>
		</ContentList>
	</article>
</ProjectLayout>

<style>
	.article {
	}

	.article__hero {
		margin-inline: 24px;

		@media (width <= 1200) {
			margin-inline: 16px;
		}

		@media (width <= 880) {
			margin-inline: 8px;
		}
	}

	.article__meta {
		margin-block-start: 32px;

		@media (width <= 880) {
			margin-block-start: 16px;
		}
	}

	.article__cover-container {
		margin-block-start: 48px;
		border-radius: var(--br-xl);

		@media (width <= 1200) {
			margin-block-start: 40px;
		}

		@media (width <= 880) {
			margin-block-start: 32px;
			border-radius: var(--br-md);
		}
	}

	.article__cover {
		transform: scale(0.9);
	}

	.article__content,
	.article__next-page {
		grid-column: 2 / span 1;

		@media (width <= 1200) {
			grid-column: unset;
		}
	}

	.article__toc {
		margin-inline-start: 64px;

		&.article__toc--desktop {
			order: 1;
		}

		&.article__toc--mobile {
			display: none;
		}

		@media (width <= 1200) {
			grid-column: unset;
			margin-inline-start: unset;

			&.article__toc--desktop {
				display: none;
			}

			&.article__toc--mobile {
				display: flex;
			}
		}
	}

	.article__content {
	}
</style>
